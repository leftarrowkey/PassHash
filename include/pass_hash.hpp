#include <chrono>
#include <string>

namespace PassHash {
/*
 * generate a setting for use with `generate_hash` with a given algorithm
 * prefix and count value.
 */
std::string generate_setting(const char *prefix, unsigned long count);
/*
 * generates the hash of a password, using a given setting. This can be
 * either generated by `generate_setting`, or the hash of another password.
 */
std::string generate_hash(std::string password, std::string setting);
/*
 * this function takes an algorithm prefix, password, and count value (see
 * `get_minimum_count`), and outputs the hashed password.
 */
std::string hash_password(std::string password, const char *prefix,
                          unsigned long count);
/*
 * a convenience function to check that a plaintext password matches a
 * password hash
 */
bool check_password(std::string password, std::string hash);
/*
 * get the minimum `count` value (to pass to various hashing functions) for
 * a given hashing time. # Example
 * ```cpp
 * // make sure to include <chrono> for time unit suffixes
 *
 * // put the time suffixes into the current scope
 * using namespace std::chrono_literals;
 * // get the minimum count needed for a bcrypt hash to take 250ms
 * unsigned long count = get_minimum_count("$2b$", 250ms);
 * ```
 * based on the code found at <https://stackoverflow.com/a/61304956>
 */
unsigned long get_minimum_count(const char *prefix,
                                std::chrono::duration<double> desired_time);
/*
 * prefixes used for some algorithms
 */
namespace AlgoPrefixes {
constexpr const char *BCRYPT = "$2b$";
constexpr const char *YESCRYPT = "$y$";
} // namespace AlgoPrefixes
}; // namespace PassHash
